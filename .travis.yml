sudo: false
dist: trusty
language: cpp

cache: pip
before_install:
  - git submodule update --init --recursive
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      mkdir $HOME/usr;
      export PATH="$HOME/usr/bin:$PATH";
      wget --no-check-certificate https://cmake.org/files/v3.9/cmake-3.9.6-Linux-x86_64.sh;
      bash ./cmake-3.9.6-Linux-x86_64.sh --prefix=$HOME/usr --exclude-subdir --skip-license;
      pip install --user awscli;
    fi

branches:
  only:
    - cmake

before_script:
  - export
  - if [ "$FUZZ" == "1" ]; then
        tar czf modeling_plugins.tar.gz tools/modeling/plugins;
        rm -rf tools/modeling/plugins tools/IntermediateTypeLang/cpp/rapidjson;
        perl tools/scripts/dds_fuzz.pl;
        tar xzf modeling_plugins.tar.gz;
        rm modeling_plugins.tar.gz;
    fi
  - if [ "$MATRIX_NAME" == "NoInline" ]; then BUILD_FLAGS="$BUILD_FLAGS -DACE_INLINE=OFF"; fi
  - if [ "$MATRIX_NAME" == "Static" ]; then BUILD_FLAGS="$BUILD_FLAGS -DBUILD_SHARED_LIBS=OFF"; fi
  - if [ "$DEBUG" == "0" ]; then
      BUILD_FLAGS="$BUILD_FLAGS -DCMAKE_BUILD_TYPE=RELEASE";
    else
      BUILD_FLAGS="$BUILD_FLAGS -DCMAKE_BUILD_TYPE=DEBUG";
    fi
  - if [ "$MATRIX_NAME" == "ASan" ]; then BUILD_FLAGS="$BUILD_FLAGS -DSANITIZE_ADDRESS=ON"; fi
  - if [ "$MATRIX_NAME" == "WChar" ]; then BUILD_FLAGS="$BUILD_FLAGS -DACE_USES_WCHAR=ON"; fi
  - if [ "$MATRIX_NAME" == "Android" ]; then
      BUILD_FLAGS="$BUILD_FLAGS -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY";
    fi
  - if [ "$MATRIX_NAME" == "MacOS" ]; then
      BUILD_FLAGS="$BUILD_FLAGS -DCMAKE_DISABLE_FIND_PACKAGE_X11=TRUE";
    fi
  ## we need to disable ccahe explicitly because it is installed in the travis ci environment but the environment
  ## does not have enough disk space or network bandwidth to cache all object code
  - export BUILD_FLAGS="$BUILD_FLAGS -DCCACHE=OFF -DACE_UNITY_BUILD=ON"

jobs:
  _build-staging: &build-staging
    stage: build
    addons: &gcc-addons
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - libxerces-c-dev
          - ninja-build
          - g++-6
    install:
      - export CXX="g++-6"
      - export CC="gcc-6"
    script:
      - echo $BUILD_FLAGS
      - cmake -GNinja -H. -Bbuild $BUILD_FLAGS
      - cmake --build build -- -j 4
    after_success:
      - echo $TRAVIS_COMMIT > build/ACE_TAO.commit
      - echo "-b $TRAVIS_BRANCH $(git remote get-url origin)"> build/ACE_TAO.clone_loc
      - cd ..
      - tar --exclude='ACE_TAO/build/ACE/ASNMP' --exclude='ACE_TAO/build/ACE/examples' --exclude='ACE_TAO/build/ACE/Kokyu'
            --exclude='ACE_TAO/build/ACE/netsvcs' --exclude='ACE_TAO/build/ACE/performance-tests'
            --exclude='ACE_TAO/build/ACE/protocols' --exclude='ACE_TAO/build/ACE/tests' --exclude='ACE_TAO/build/ACE/websvcs'
            --exclude='.git' --exclude='*.o' -czf ace-tao.tar.gz ACE_TAO
      - aws s3 cp ace-tao.tar.gz s3://com.ociweb.opendds/artifacts/ace-tao-${TRAVIS_BRANCH}-${MATRIX_NAME}.tar.gz

  _clang-Env: &clang-Env
    addons:
      apt:
         sources:
           - llvm-toolchain-trusty-5.0
         packages:
           - libxerces-c-dev
           - ninja-build
           - clang++-5.0
           - lld-5.0
    install:
      - export CXX=clang++-5.0
      - export CC=clang
      - export LDFLAGS='-fuse-ld=lld-5.0'
  _macOS-Env: &macos-Env
    os: osx
    osx_image: xcode9
    install:
      - brew update
      - brew install ninja awscli
      - export CXX=c++
    env: "MATRIX_NAME=MacOS"

  include:
    ## Build stages are sorted on the build times to minimize the total completion time
    - <<: *build-staging
      <<: *macos-Env
    - <<: *build-staging
      env: &Release-Env "MATRIX_NAME=Release DEBUG=0"
    - <<: *build-staging
      env: &NoInline-Env "MATRIX_NAME=NoInline DEBUG=1"
    - <<: *build-staging
      env: &Debug-Env "MATRIX_NAME=Debug DEBUG=1"
    - <<: *build-staging
      ## static debug build would cause out of disk space error on travis ci
      env: &Static-Env "MATRIX_NAME=Static DEBUG=0"
    - <<: *build-staging
      env: &WChar-Env "MATRIX_NAME=WChar"
    - <<: *build-staging
      <<: *clang-Env
      env: "MATRIX_NAME=Clang"
    # - <<: *build-staging
    #   env: "MATRIX_NAME=ASan"

